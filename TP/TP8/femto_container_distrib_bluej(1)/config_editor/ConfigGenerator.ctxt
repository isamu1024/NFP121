#BlueJ class context
comment0.target=ConfigGenerator
comment0.text=\ <b>ConfigGenerator</b>\ est\ un\ outil\ d'aide\ \u00E0\ la\ g\u00E9n\u00E9ration\ des\ fichiers\ de\ configuration.<br>\r\n\ Chaque\ mutateur(<i>setter</i>)\ est\ d\u00E9tect\u00E9\ et\ l'outil\ engendre\ les\ items\ attendus\ pour\ le<br>\r\n\ fichier\ de\ configuration,\ un\ mutateur\ est\ une\ m\u00E9thode\ qui\ respecte\ les\ conventions\ habituelles\ \:<br>\r\n\ \ \ public\ void\ <b>set</b>Xzzz(type\ elt){thix.xzzz\=elt;}\ avec\ type\ xzzz;\ comme\ attribut.<br>\r\n\ Soit\ \:\ Commencer\ par\ <b>set</b>,\ avoir\ un\ seul\ param\u00E8tre\ et\ ne\ pas\ retourner\ de\ r\u00E9sultat\ (void)<br>\r\n\ Les\ items\ engendr\u00E9s\ d\u00E9pendent\ du\ <i>formatter</i>,\ choisi.\ cf.\ setFormatter().<br>\r\n\ Un\ num\u00E9ro\ de\ bean\ par\ fichier\ .class\ est\ attribu\u00E9,\ les\ valeurs\ des\ attributs\ doivent\ ensuite\ \u00EAtre<br>\r\n\ renseign\u00E9es\ afin\ de\ produire\ un\ fichier\ de\ configuration\ avec\ les\ valeurs\ des\ attributs\ attendues<br><br>\r\n\ Par\ d\u00E9faut,\ sont\ g\u00E9n\u00E9r\u00E9es,\ les\ valeurs\ par\ d\u00E9faut\ pour\ les\ types\ primitifs\ et\ leur\ "wrapper",<br>\r\n\ ou\ bien\ une\ description\ textuelle,\ synth\u00E9tique\ de\ ce\ qui\ est\ attendu.<br>\r\n\ <br>\r\n\ Ci-dessous\ un\ usage\ possible\ \:\r\n\ <pre>\r\n\ \ \ \ \ \ \ IConfigGenerator\ configGenerator\ \=\ new\ ConfigGenerator();\r\n\ \ \ \ \ \ \ configGenerator.setBeanNumber(1);\r\n\ \ \ \ \ \ \ Formatter\ formatter\ \=\ new\ PropertiesFormatter();\r\n\ \ \ \ \ \ \ configGenerator.setFormatter(formatter);\r\n\ \ \ \ \ \ \ configGenerator.analyze("syntaxe_exemples/");\ \ \r\n\ \ \ \ \ \ \ System.out.println(configGenerator.getFormatter().get());\r\n\ </pre><br>\r\n\ Ci-dessous\ un\ extrait\ de\ ce\ qui\ est\ g\u00E9n\u00E9r\u00E9,\ il\ ne\ reste\ qu'\u00E0\ renseigner\ les\ valeurs\ des\ attributs\ \:\r\n\ <pre>\r\n\ bean.id.1\=a\r\n\ a.class\=syntaxe_exemples.A\r\n\ a.property.1\=f\ \ \ <i>un\ mutateur\ setF(float\ f)</i>\r\n\ a.property.1.param.1\=<i><b>0.0F</b>\ par\ d\u00E9faut\ 0.0F\ pour\ un\ attribut\ de\ type\ float</i>\ \r\n\ a.property.2\=tab\ <i>un\ mutateur\ setTab(int[]\ t)</i>\r\n\ a.property.2.param.1\=<i><b>an_array_0</b>\ une\ table\ d'entiers\ est\ attendue\ </i>\ \r\n\ ...\r\n\ bean.id.7\=listeDeTables\r\n\ listeDeTables.class\=syntaxe_exemples.ListeDeTables\r\n\ listeDeTables.property.1\=table\ \ <i>un\ mutateur\ setTable(Table\ t)</i>\r\n\ listeDeTables.property.1.param.1\=<i><b>a_Table_bean</b>\ une\ table,un\ bean\ est\ attendu</i>\ \r\n\ listeDeTables.property.2\=tables\ <i>un\ mutateur\ setTables(Table[]\ t)</i>\r\n\ listeDeTables.property.2.param.1\=<i><b>an_array_a_Table_bean</b>\ une\ table\ de\ tables/bean\ est\ attendue</i>\ \r\n\ </pre>\r\n\ Un\ autre\ exemple,\ en\ utilisant\ femtoContainer,\ l'outil\ d'aide\ est\ un\ bean.<br>\r\n\ <pre>\r\n\ \ \ \ ApplicationContext\ ctx\ \=\ Factory.createApplicationContext("./config_editor/config.txt");\r\n\ \ \ \ IConfigGenerator\ configGenerator\ \=\ ctx.getBean("configGenerator1");\r\n\ \ \ \ configGenerator.analyze();\r\n\ \ \ \ System.out.println(configGenerator.getFormatter().get());\r\n\ </pre>\r\n\ Un\ extrait\ du\ fichier\ de\ config.txt\ (cr\u00E9\u00E9\ avec\ cet\ outil...)\r\n\ <pre>\r\n\ bean.id.1\=configGenerator1\r\n\ configGenerator1.class\=config_editor.ConfigGenerator\r\n\ configGenerator1.property.1\=beanName\r\n\ configGenerator1.property.1.param.1\=generator\r\n\ configGenerator1.property.2\=beanPrefixName\r\n\ configGenerator1.property.2.param.1\=test_\r\n\ configGenerator1.property.3\=beanNumber\r\n\ configGenerator1.property.3.param.1\=1\r\n\ configGenerator1.property.4\=formatter\r\n\ configGenerator1.property.4.param.1\=propertiesFormatter1\r\n\ configGenerator1.property.5\=beanClassFileName\r\n\ configGenerator1.property.5.param.1\=config_editor.ConfigGenerator\r\n\ \r\n\ bean.id.2\=propertiesFormatter1\r\n\ propertiesFormatter1.class\=config_editor.PropertiesFormatter\r\n\ </pre>\r\n\ <br>\r\n\ @see\ config_editor.ConfigGeneratorTests.java\r\n\ @see\ config_editor.ConfigGeneratorMainTests.java\r\n\ @version\ 1.0,\ Mars\ 2019\r\n\ @author\ jean-michel\ Douin\r\n
comment1.params=
comment1.target=ConfigGenerator()
comment10.params=
comment10.target=java.lang.String\ getBeanPrefixName()
comment11.params=beanNumber
comment11.target=void\ setBeanNumber(int)
comment12.params=
comment12.target=int\ getBeanNumber()
comment13.params=
comment13.target=java.lang.String\ getCompleteBeanName()
comment14.params=comment
comment14.target=void\ setComment(boolean)
comment15.params=beanClassFileName
comment15.target=ConfigGenerator\ analyzeBeanClassFileName(java.lang.String)
comment16.params=pathOrFileName\ filter
comment16.target=ConfigGenerator\ analyze(java.lang.String,\ java.io.FilenameFilter)
comment17.params=dir\ name
comment17.target=boolean\ accept(java.io.File,\ java.lang.String)
comment18.params=pathOrFileName
comment18.target=ConfigGenerator\ analyze(java.lang.String)
comment19.params=
comment19.target=ConfigGenerator\ analyze()
comment2.params=beanNumber\ beanPrefixName\ beanName\ beanClassName
comment2.target=ConfigGenerator(int,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment20.params=cl
comment20.target=java.lang.String\ getDefault(java.lang.Class)
comment3.params=beanPrefixName
comment3.target=void\ setBeanPrefixName(java.lang.String)
comment4.params=beanClassFileName
comment4.target=void\ setBeanClassFileName(java.lang.String)
comment5.params=beanName
comment5.target=void\ setBeanName(java.lang.String)
comment6.params=formatter
comment6.target=void\ setFormatter(Formatter)
comment7.params=
comment7.target=Formatter\ getFormatter()
comment8.params=
comment8.target=java.lang.String\ getBeanName()
comment9.params=
comment9.target=java.lang.String\ getBeanClassFileName()
numComments=21
